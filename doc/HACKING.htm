<HTML><HEAD>
<TITLE>Survex Hacker's Guide</TITLE>
<STYLE type="text/css"><!--
BODY, TD, CENTER, UL, OL {font-family: sans-serif;}
-->
</STYLE>
</HEAD><BODY BGCOLOR=white TEXT=black>
<H1>Hacking Survex</H1>

<p>(That's hacking in the "tinkering with code" sense, not in the
"breaking into other people's computer systems" sense).

<p>This is currently a random collection of notes that need to be written
down while I remember.  With time it should evolve into a more
coherent document.  If you have any questions which this should answer
but doesn't then ask me and I'll add them.

<H2>Network code debugging</H2>

<P>You can pick which network simplifications are attempted using "-z"
with an argument listing code letters.  So:

<ul>
<li>-z=    no special simplifications (articulation still performed)
<li>-z=l   remove "lollipops"
<li>-z=p   remove parallel legs
<li>-z=d   convert deltas to stars
</ul>

<P>And you can combine these in any combination:

<ul>
<li>-z=lp  remove "lollipops" and parallel legs
<li>-z=lpd remove "lollipops" and parallel legs; convert deltas to stars
</ul>

<P>"-z=lpd" is the default (in 0.99 at least - more transformations may
conceivably be added in future, although the simple common cases are
already covered).

<H2>Developing on Unix Platforms</H2>

<P>You'll need automake 1.5 or later (earlier versions don't support
per-executable CFLAGS; 1.6 has been tested and works, but wasn't a
very stable release - automake 1.6.1 is a better bet)
and autoconf 2.50 or later (autoconf 2.52, 2.53, 2.64 and 2.71 have all
been used successfully).

<p>The wxWidgets library is used for aven's UI.  Currently >= 3.0.0 is
supported.

<p>The PROJ library is used for coordinate conversions.  Currently >= 8.2.0 is
supported.

<P>The Perl Locale::PO module is used for process message translation files.

<P>For building the documentation you'll need docbook-utils (also
known as docbook-tools) and w3m.

<P>And for building unifont.pixelfont, you'll need unifont installed.

<P>On Debian, you can install the required packages using:

<pre>
sudo apt-get install autoconf automake liblocale-po-perl libproj-dev libwxgtk3.0-gtk3-dev inkscape netpbm docbook-utils w3m unifont
</pre>

<H2>Building on Non-Unix Platforms</H2>

<H3>Mingw (Microsoft Windows)</H3>

<P>Currently I build this with a Linux hosted cross-compiler.  I use
the packaged cross-compiler in the debian testing/unstable distribution:

<pre>
sudo apt-get install mingw-w64-i686-dev
</pre>

<p>
I then install the various libraries by compiling from source.  For wxWidgets
3.0.5, I apply a
<a href="https://survex.com/software/wxWidgets-3.0.5.patch">patch</a> to
fix a compiler error and disable a pointless and annoying compiler ABI check
(with this check aven stops working each time my cross compiler package is
upgraded to a new GCC version; without it everything works fine).
</p>

<p>
Then I configure, build and install with:
</p>

<pre>
./configure --prefix=/usr/i686-w64-mingw32 --host i686-w64-mingw32 --with-msw --with-opengl --enable-display --disable-shared host_alias=i686-w64-mingw32
make
sudo make install
</pre>

<p>
For PROJ 4.8.0:
</p>

<pre>
mkdir BUILD
cd BUILD
../configure --prefix=/usr/i686-w64-mingw32 --host i686-w64-mingw32 --disable-shared host_alias=i686-w64-mingw32
make
sudo make install
</pre>

<p>
For libav 10.3:
</p>

<pre>
sudo apt-get install yasm
mkdir BUILD
cd BUILD
../configure --prefix=/usr/i686-w64-mingw32 --cross-prefix=i686-w64-mingw32- --enable-cross-compile --target-os=mingw32 --arch=i686 --disable-shared --disable-decoders --disable-demuxers --disable-programs --disable-network --disable-bsfs --disable-protocols --disable-devices
make
sudo make install
</pre>

<P>Building on Windows in a native mingw environment will probably
require tinkering.  Best bet is probably to install bash and use the
current configure script.  I'm happy to help if you want to try this,
and I'll incorporate patches provided they're fairly clean.

<H2>Microsoft Windows Installer Builder</H2>

<P>We use <A HREF="http://www.jrsoftware.org/isinfo.php">InnoSetup</A> to
build the MS Windows Installer.  Survex 1.2.23 was built using InnoSetup
5.5.6 (non-Unicode version, which apparently produces smaller installer
packages).

<P>Here are some random notes:

<H3>Packages Needed</H3>

<P>On Debian, the commands to install wine vary depending on the architecture
you're running - to check this use:

<pre>
dpkg-architecture -qDEB_HOST_GNU_CPU
</pre>

<H4>For i386</H4>

<pre>
sudo apt-get install wine wx3.0-i18n
</pre>

<H4>For x86_64</H4>

<P>You'll need to enable multi-arch and install the i386 packages of wine:

<pre>
sudo dpkg --add-architecture i386
sudo apt-get update
sudo apt-get install wine wine-bin:i386 wx3.0-i18n
</pre>

<H4>Common</H4>

<P>And then run:

<pre>
wine ~/Downloads/isetup-5.5.3.exe
</pre>

<H3>Translations</H3>

<P>In addition to the translations included with InnoSetup as standard, we also
add these, which you can find in the <code>lib</code> subdirectory of Survex's
source tree:

<UL>
<li>ChineseSimplified.isl (Unofficial translation; for 5.5.3+)
<li>ChineseTraditional.isl (Candidate official translation; for 5.5.3+)
<li>EnglishBritish.isl (Unofficial translation; for 5.5.3+)
<li>Indonesian.isl (Unofficial translation; for 5.5.3+)
<li>Romanian.isl (Unofficial translation; for 5.5.3+)
<li>Slovak.isl (Unofficial translation; for 5.5.3+)
</UL>

These are taken from the innosetup repo at
https://github.com/jrsoftware/issrc.git
(look in the <code>Files/Languages/Unofficial</code> subdirectory).

<H3>survex.iss</H3>

<P>This file is generated by configure (from the template survex.iss.in).
We could instead have a static survex.iss which uses #include to pull in
a file with the Survex version info in, but the current method works well
enough so we'll stick with it for now (I suspect #include was introduced since
we started using InnoSetup).

</BODY></HTML>
